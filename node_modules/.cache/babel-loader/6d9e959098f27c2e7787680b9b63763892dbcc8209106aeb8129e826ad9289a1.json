{"ast":null,"code":"const charitySlice = createSlice({\n  name: 'charity',\n  initialState: {\n    charities: [],\n    donors: [],\n    totalDonations: 0,\n    beneficiaries: [],\n    inventory: [],\n    stories: {},\n    // Stories will now be an object where each charity has its own list of stories\n    user: {\n      isAdmin: false\n    } // Default user state\n  },\n  reducers: {\n    setCharityDetails: (state, action) => {\n      state.charities.push(action.payload);\n    },\n    setDonors: (state, action) => {\n      state.donors = action.payload;\n    },\n    setTotalDonations: (state, action) => {\n      state.totalDonations = action.payload;\n    },\n    setInventory: (state, action) => {\n      state.inventory = action.payload;\n    },\n    addBeneficiary: (state, action) => {\n      const {\n        charityId,\n        name,\n        age\n      } = action.payload;\n      const charity = state.charities.find(charity => charity.id === charityId);\n      if (charity) {\n        if (!charity.beneficiaries) {\n          charity.beneficiaries = [];\n        }\n        charity.beneficiaries.push({\n          name,\n          age\n        });\n      }\n    },\n    addStory: (state, action) => {\n      const {\n        charityId,\n        title,\n        content\n      } = action.payload;\n      if (!state.stories[charityId]) {\n        state.stories[charityId] = [];\n      }\n      state.stories[charityId].push({\n        title,\n        content\n      });\n    },\n    setUser: (state, action) => {\n      state.user = action.payload; // Set user role info (e.g., isAdmin)\n    }\n  }\n});\nexport const {\n  setCharityDetails,\n  setDonors,\n  setTotalDonations,\n  setInventory,\n  addBeneficiary,\n  addStory,\n  setUser\n} = charitySlice.actions;","map":{"version":3,"names":["charitySlice","createSlice","name","initialState","charities","donors","totalDonations","beneficiaries","inventory","stories","user","isAdmin","reducers","setCharityDetails","state","action","push","payload","setDonors","setTotalDonations","setInventory","addBeneficiary","charityId","age","charity","find","id","addStory","title","content","setUser","actions"],"sources":["/home/steve/Development/code/phase 5/donate 2/src/redux/charitySlice.js"],"sourcesContent":["const charitySlice = createSlice({\n  name: 'charity',\n  initialState: {\n    charities: [],\n    donors: [],\n    totalDonations: 0,\n    beneficiaries: [],\n    inventory: [],\n    stories: {},  // Stories will now be an object where each charity has its own list of stories\n    user: { isAdmin: false },  // Default user state\n  },\n  reducers: {\n    setCharityDetails: (state, action) => {\n      state.charities.push(action.payload);\n    },\n    setDonors: (state, action) => {\n      state.donors = action.payload;\n    },\n    setTotalDonations: (state, action) => {\n      state.totalDonations = action.payload;\n    },\n    setInventory: (state, action) => {\n      state.inventory = action.payload;\n    },\n    addBeneficiary: (state, action) => {\n      const { charityId, name, age } = action.payload;\n      const charity = state.charities.find(charity => charity.id === charityId);\n      if (charity) {\n        if (!charity.beneficiaries) {\n          charity.beneficiaries = [];\n        }\n        charity.beneficiaries.push({ name, age });\n      }\n    },\n    addStory: (state, action) => {\n      const { charityId, title, content } = action.payload;\n      if (!state.stories[charityId]) {\n        state.stories[charityId] = [];\n      }\n      state.stories[charityId].push({ title, content });\n    },\n    setUser: (state, action) => {\n      state.user = action.payload;  // Set user role info (e.g., isAdmin)\n    },\n  },\n});\n\nexport const { \n  setCharityDetails,\n  setDonors,\n  setTotalDonations,\n  setInventory,\n  addBeneficiary,\n  addStory,\n  setUser,\n} = charitySlice.actions;\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,WAAW,CAAC;EAC/BC,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,SAAS,EAAE,EAAE;IACbC,MAAM,EAAE,EAAE;IACVC,cAAc,EAAE,CAAC;IACjBC,aAAa,EAAE,EAAE;IACjBC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,CAAC,CAAC;IAAG;IACdC,IAAI,EAAE;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAG;EAC7B,CAAC;EACDC,QAAQ,EAAE;IACRC,iBAAiB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACV,SAAS,CAACY,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACtC,CAAC;IACDC,SAAS,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACT,MAAM,GAAGU,MAAM,CAACE,OAAO;IAC/B,CAAC;IACDE,iBAAiB,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACR,cAAc,GAAGS,MAAM,CAACE,OAAO;IACvC,CAAC;IACDG,YAAY,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACN,SAAS,GAAGO,MAAM,CAACE,OAAO;IAClC,CAAC;IACDI,cAAc,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAAEO,SAAS;QAAEpB,IAAI;QAAEqB;MAAI,CAAC,GAAGR,MAAM,CAACE,OAAO;MAC/C,MAAMO,OAAO,GAAGV,KAAK,CAACV,SAAS,CAACqB,IAAI,CAACD,OAAO,IAAIA,OAAO,CAACE,EAAE,KAAKJ,SAAS,CAAC;MACzE,IAAIE,OAAO,EAAE;QACX,IAAI,CAACA,OAAO,CAACjB,aAAa,EAAE;UAC1BiB,OAAO,CAACjB,aAAa,GAAG,EAAE;QAC5B;QACAiB,OAAO,CAACjB,aAAa,CAACS,IAAI,CAAC;UAAEd,IAAI;UAAEqB;QAAI,CAAC,CAAC;MAC3C;IACF,CAAC;IACDI,QAAQ,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MAC3B,MAAM;QAAEO,SAAS;QAAEM,KAAK;QAAEC;MAAQ,CAAC,GAAGd,MAAM,CAACE,OAAO;MACpD,IAAI,CAACH,KAAK,CAACL,OAAO,CAACa,SAAS,CAAC,EAAE;QAC7BR,KAAK,CAACL,OAAO,CAACa,SAAS,CAAC,GAAG,EAAE;MAC/B;MACAR,KAAK,CAACL,OAAO,CAACa,SAAS,CAAC,CAACN,IAAI,CAAC;QAAEY,KAAK;QAAEC;MAAQ,CAAC,CAAC;IACnD,CAAC;IACDC,OAAO,EAAEA,CAAChB,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACJ,IAAI,GAAGK,MAAM,CAACE,OAAO,CAAC,CAAE;IAChC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXJ,iBAAiB;EACjBK,SAAS;EACTC,iBAAiB;EACjBC,YAAY;EACZC,cAAc;EACdM,QAAQ;EACRG;AACF,CAAC,GAAG9B,YAAY,CAAC+B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}